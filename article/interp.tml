Interpreters

In this lecture, we will explore the implementation of a variety of
interpreters.

#### Byte-code interpreter for C-like language

Imagine a C-like language (or simply Java without polymorphism) for
which you want to build a byte-code style interpreter.  In other
words, a "compiler" will translate language source code into byte
codes for an imaginary stack machine.  Then, you will interpret the
byte codes to simulate execution of the program.  A program like

<<
int a,b;
int x;
int foo(int i) {
  float local = 0;
  local = i + 2;
  x = local;
  return local;
}
>>

might resemble the following in byte code form:

<<
foo:
; float local = 0
    lalloc 1
    const 0.0
    lstore -2
; local = i + 2
    lpush -1
    const 2
    add
    tofloat
    lstore -2
; x = local
    lpush -2
    store 8
; return local
    lpush -2
    ret
>>

1 What fundamental data structures would you need?  In other words,
what hardware entities would you need to simulate?

1 What normal CPU registers would you have to simulate?

1 Would you simulate a byte-addressable or word-addressable stack?
What about the simulated memory system?  Would your stack be typed (in
other words, if you push {34} on the stack would you know it's an
{int} later on)?

1 What would the stack frame for a method call to {foo(36);} look like
given the code above?
<<
 0: |      ...       | <- SP
    |________________|
 1: |                |
    |________________|
 2: |                |
    |________________|
 3: |                |
    |________________|
 4: |                |
    |________________|
 5: |                |
    |________________|
    |      ...       |
>>

1 What would the {ret} instruction do?

1 Describe the general algorithm or strategy for executing instructions.

1 Why not simulate a register machine instead of a stack machine?

1 What could you do to make the interpreter more efficient (including
reorganizing byte codes)?

1 Consider how you might compile the byte code on the fly.  In particular, how
you would generate and execute the following:
  1 a threaded interpreter
  1 native stack code
  1 register code

#### Byte-code interpreter with data aggregates

Assuming you have a basic interpreter that handles simple primitives
like {int} and {float}, how would you add data aggregate support?  In
other words, how would you translate

<<
struct payment {
  int employeeID;
  float amount;
};

struct payment pay;

void f() {
  pay.amount = 330;
}
>>

#### Byte-code interpreter with pointers

Ok, now add pointers like the following:

<<
int *p;
int x;
void f() {
  p = &x;
  *p = 99;
}
>>

1 What would the bytecodes look like

1 What would the bytecodes for {pay->payment=330;} look like if {pay}
were a pointer to a {payment} structure from above  Assume {pay} is at
address 0?

#### Byte-code interpreter with polymorphism

Method calls are pretty simple for a non-object-oriented language like
C.  If you call function {foo()}, you can generate the simple:

<<
    call f
>>

instruction.  What if you want to call method {getEmployeeID()} on a
{Payment} object defined as follows?

<<
class Object {
  // methods defined in all classes
  public Class getClass() { ... }
  public String toString() { ... }
}

class Payment extends Object {
  int employeeID;
  float amount;
  public int getEmployeeID() {
    return employeeID;
  }
}

...
Payment p = new Payment();
int ID = p.getEmployeeID();
>>

1 Is the layout of an object any different in memory than a {struct}?
Does an object require more memory space for the same list of fields?

1 What byte codes would you generate for {p.getEmployeeID()} for local
{p}?

1 Do you need to have symbol table information around at run-time to
implement polymorphism?  Do you need type information stored in each object?

#### AST Interpretation

For the most part, using an AST as the intermediate form for
interpretation/execution is straightforward like using byte-codes.
We've seen expression tree evaluation before where rule {expr} returns
a value computed by the various alternatives.

1 Would you use an AST that was higher level than byte-codes (for
example, would you make an AST with symbols in it or memory addresses)?

1 How would you handle function calls?

1 How would you handle polymorphic method calls?

